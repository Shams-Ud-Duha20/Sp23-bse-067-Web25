const Vehicle = require('../models/vehicle.model');
const multer = require('multer');
const path = require('path');

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, 'public/uploads');
    },
    filename: (req, file, cb) => {
        cb(null, file.fieldname + '-' + Date.now() + path.extname(file.originalname));
    }
});

exports.upload = multer({
    storage: storage,
    limits: { fileSize: 5 * 1024 * 1024 },
    fileFilter: (req, file, cb) => {
        const filetypes = /jpeg|jpg|png|gif/;
        const mimetype = filetypes.test(file.mimetype);
        const extname = filetypes.test(path.extname(file.originalname).toLowerCase());

        if (mimetype && extname) {
            return cb(null, true);
        }
        cb(new Error('Only images (jpeg, jpg, png, gif) are allowed!'));
    }
}).single('image');

exports.getAddVehiclePage = (req, res) => {
    res.render('admin/vehicles/add_vehicle', {
        title: 'Add New Vehicle',
        vehicle: null,
        errors: []
    });
};

exports.createVehicle = async (req, res) => {
    const { name, brand, price, type, description } = req.body;
    let errors = [];

    if (!name || !brand || !price || !type) {
        errors.push('Name, brand, price, and type are required.');
    }
    if (isNaN(price) || parseFloat(price) <= 0) {
        errors.push('Price must be a positive number.');
    }

    if (errors.length > 0) {
        return res.render('admin/vehicles/add_vehicle', {
            title: 'Add New Vehicle',
            vehicle: req.body,
            errors
        });
    }

    try {
        const newVehicle = new Vehicle({
            name,
            brand,
            price: parseFloat(price),
            type,
            image: req.file ? `/uploads/${req.file.filename}` : '/uploads/placeholder-vehicle.jpg'
        });
        await newVehicle.save();

        req.session.success_msg = `${name} added successfully!`;
        res.redirect('/admin/vehicles');

    } catch (err) {
        console.error('Error adding vehicle:', err);
        if (err instanceof multer.MulterError) {
            errors.push(`File upload error: ${err.message}`);
        } else if (err.message === 'Only images (jpeg, jpg, png, gif) are allowed!') {
            errors.push(err.message);
        } else {
            errors.push('Failed to add vehicle. Please try again.');
        }

        return res.render('admin/vehicles/add_vehicle', {
            title: 'Add New Vehicle',
            vehicle: req.body,
            errors
        });
    }
};

exports.listVehicles = async (req, res) => {
    try {
        const vehicles = await Vehicle.find().sort({ createdAt: -1 });
        res.render('admin/vehicles/list_vehicles', {
            title: 'Manage Vehicles',
            vehicles
        });
    } catch (err) {
        console.error('Error listing vehicles:', err);
        req.session.error_msg = 'Failed to load vehicles.';
        res.redirect('/admin/dashboard');
    }
};

exports.getEditVehiclePage = async (req, res) => {
    try {
        const vehicle = await Vehicle.findById(req.params.id);
        if (!vehicle) {
            req.session.error_msg = 'Vehicle not found.';
            return res.redirect('/admin/vehicles');
        }
        res.render('admin/vehicles/edit_vehicle', {
            title: 'Edit Vehicle',
            vehicle,
            errors: []
        });
    } catch (err) {
        console.error('Error fetching vehicle for edit:', err);
        req.session.error_msg = 'Failed to load vehicle for editing.';
        res.redirect('/admin/vehicles');
    }
};

exports.updateVehicle = async (req, res) => {
    const { name, brand, price, type, description } = req.body;
    let errors = [];

    if (!name || !brand || !price || !type) {
        errors.push('Name, brand, price, and type are required.');
    }
    if (isNaN(price) || parseFloat(price) <= 0) {
        errors.push('Price must be a positive number.');
    }

    if (errors.length > 0) {
        return res.render('admin/vehicles/edit_vehicle', {
            title: 'Edit Vehicle',
            vehicle: { _id: req.params.id, ...req.body },
            errors
        });
    }

    try {
        const updateData = {
            name,
            brand,
            price: parseFloat(price),
            type
        };
        if (req.file) {
            updateData.image = `/uploads/${req.file.filename}`;
        }

        await Vehicle.findByIdAndUpdate(req.params.id, updateData, { new: true });

        req.session.success_msg = `${name} updated successfully!`;
        res.redirect('/admin/vehicles');

    } catch (err) {
        console.error('Error updating vehicle:', err);
        if (err instanceof multer.MulterError) {
            errors.push(`File upload error: ${err.message}`);
        } else if (err.message === 'Only images (jpeg, jpg, png, gif) are allowed!') {
            errors.push(err.message);
        } else {
            errors.push('Failed to update vehicle. Please try again.');
        }
        return res.render('admin/vehicles/edit_vehicle', {
            title: 'Edit Vehicle',
            vehicle: { _id: req.params.id, ...req.body, image: req.file ? `/uploads/${req.file.filename}` : req.body.currentImage },
            errors
        });
    }
};

exports.deleteVehicle = async (req, res) => {
    try {
        const result = await Vehicle.findByIdAndDelete(req.params.id);
        if (result) {
            req.session.success_msg = 'Vehicle deleted successfully!';
        } else {
            req.session.error_msg = 'Vehicle not found or already deleted.';
        }
    } catch (err) {
        console.error('Error deleting vehicle:', err);
        req.session.error_msg = 'Failed to delete vehicle. Please try again.';
    } finally {
        res.redirect('/admin/vehicles');
    }
};

exports.listVehiclesPublic = async (req, res) => {
    try {
        const vehicles = await Vehicle.find().sort({ createdAt: -1 });
        res.render('vehicles/list_vehicles_public', {
            title: 'Our Vehicles',
            vehicles
        });
    } catch (err) {
        console.error('Error listing public vehicles:', err);
        res.render('vehicles/list_vehicles_public', { title: 'Our Vehicles', vehicles: [], error_msg: 'Failed to load vehicles.' });
    }
};